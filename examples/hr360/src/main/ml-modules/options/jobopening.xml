<options xmlns="http://marklogic.com/appservices/search">
  <search-option>unfiltered</search-option>
  <page-length>10</page-length>

  <!-- Limit all searches to this additional query -->
  <additional-query>
    <cts:collection-query xmlns:cts="http://marklogic.com/cts">
      <cts:uri>jobopening</cts:uri>
    </cts:collection-query>
  </additional-query>

  <!-- Full-text search options -->
  <term apply="term">
    <empty apply="all-results"/>
    <!--
      Below some example options for full-text searches. Note that MarkLogic will
      toggle options automatically depending on caps, wildcards etc.
      See Usage Notes of http://docs.marklogic.com/cts:word-query for details.
      Also note that forcing stemmed searches will disable wildcarded searches.
    -->
    <term-option>punctuation-insensitive</term-option>
    <term-option>unstemmed</term-option>
  </term>

  <!-- Default sort order. You can also associate states with sort orders to allow switching sort orders -->
  <sort-order direction="descending">
    <score/>
  </sort-order>

  <return-query>1</return-query>

  <!-- This controls the snippet size toggle -->
  <!-- Not used, but the default snippeting behavior if no state (see compact/detailed below) was specified -->
  <transform-results apply="snippet" ns="http://marklogic.com/search-results"
      at="/lib/snippeting.xqy">
  </transform-results>

  <result-decorator apply="decorator"
    ns="http://marklogic.com/search-decorator"
    at="/lib/searchResultDecorator.xqy"/>

  <!-- This controls the snippet size toggle -->
  <operator name="results">
    <state name="compact">
        <transform-results apply="snippet" ns="http://marklogic.com/search-results"
        at="/lib/snippeting.xqy">
      </transform-results>
    </state>
    <state name="detailed">
      <transform-results apply="snippet" ns="http://marklogic.com/search-results"
        at="/lib/snippeting.xqy">
      </transform-results>
    </state>
  </operator>

  <operator name="sort">
    <state name="score">
      <sort-order>
        <score/>
      </sort-order>
    </state>
  </operator>

  <!-- <constraint name="myProperty">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint" >
      <facet-option>limit=10</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
      <element ns="" name="myProperty"/>
    </range>
  </constraint> -->

  <!-- <constraint name="Education">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint" >
      <facet-option>limit=10</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
      <element ns="" name="Education"/>
    </range>
  </constraint>

  <constraint name="Experience">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint" >
      <facet-option>limit=10</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
      <element ns="" name="Experience"/>
    </range>
  </constraint>
 -->
  <constraint name="RequiredCompetency">
    <range type="xs:string" facet="true" collation="http://marklogic.com/collation/codepoint" >
      <facet-option>limit=10</facet-option>
      <facet-option>frequency-order</facet-option>
      <facet-option>descending</facet-option>
      <element ns="" name="requiredCompetency"/>
    </range>
  </constraint>

  <!-- This will extract the person's name from the search.  This path is specific to the person data
       sample data set.  As of beta release, you may override this by editing the default search route
       config options used in middle-tier/routes/api/index.js -->
  <extract-document-data selected="include">
    <extract-path>//*:instance/node()</extract-path>
  </extract-document-data>

</options>
